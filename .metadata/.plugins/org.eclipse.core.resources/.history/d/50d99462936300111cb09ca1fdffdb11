package edu.caltech.cs141b.hw5.android;

import java.util.List;

import edu.caltech.cs141b.hw5.android.data.DocumentMetadata;
import edu.caltech.cs141b.hw5.android.data.InvalidRequest;
import edu.caltech.cs141b.hw5.android.data.LockExpired;
import edu.caltech.cs141b.hw5.android.data.LockUnavailable;
import edu.caltech.cs141b.hw5.android.data.LockedDocument;
import edu.caltech.cs141b.hw5.android.data.UnlockedDocument;
import edu.caltech.cs141b.hw5.android.proto.CollabServiceWrapper;
import android.app.Activity;
import android.content.Intent;
import android.os.Bundle;
import android.util.Log;
import android.view.View;
import android.widget.Button;
import android.widget.EditText;
import android.widget.TextView;
import android.widget.Toast;

public class DocumentDisplayActivity extends Activity {

	private static String TAG = "DocumentDisplayActivity";
	private CollabServiceWrapper service;
	private MyObjects mObjects;
	private Button save;
	private Button lock;
	private Button refresh;
	private EditText text1;
	private EditText text2;
	
	public void onCreate(Bundle savedInstanceState) {
        super.onCreate(savedInstanceState);
        setContentView(R.layout.documentdisplay);
        save = (Button) findViewById(R.id.save);
        lock = (Button) findViewById(R.id.lock);
        refresh = (Button) findViewById(R.id.refresh);
        text1 = (EditText) findViewById(R.id.title);
		text2 = (EditText) findViewById(R.id.contents);
        
        service = new CollabServiceWrapper();
        mObjects = (MyObjects)getApplicationContext();
        
        Bundle extras = getIntent().getExtras();
		if (extras == null) {
			return;
		}
		
		if (extras.getString("method").equals("list")) {
			
			String key = extras.getString("documentKey");
			if (key == null) {
				return;
			} else if (key.equals("null")) {
				discardExisting(null);
				LockedDocument doc = new LockedDocument(null, null, null,
						"Enter the document title.",
						"Enter the document contents.");
				mObjects.setLockedDoc(doc);
				setView(doc);
			} else {
				discardExisting(key);
				try {
					UnlockedDocument doc = service.getDocument(key);
					mObjects.setUnlockedDoc(doc);
					setView(doc);
				} catch (InvalidRequest e) {
					e.printStackTrace();
				}
			}
		} else if (extras.getString("method").equals("main")) {
			UnlockedDocument unLockedDoc = mObjects.getUnlockedDoc();
			LockedDocument lockedDoc = mObjects.getLockedDoc();
			if (unLockedDoc != null) {
				setView(unLockedDoc);
			} else if (lockedDoc != null) {
				setView(lockedDoc);
			}
		}
		
		
		// Try lock and unlocking a document
        /*try {
			LockedDocument ld = service.lockDocument(metas.get(0).getKey());
			Log.i(TAG, "locked");
			
			// try modify and save the document
			LockedDocument mld = new LockedDocument(ld.getLockedBy(), 
					ld.getLockedUntil(), ld.getKey(), ld.getTitle() + " mod1", ld.getContents());
			service.saveDocument(mld);
			Log.i(TAG, "saved");
			
			// Should get lock expired here
			service.releaseLock(ld);
			Log.i(TAG, "unlocked");
        } catch (LockExpired e) {
        	Log.i(TAG, "lock expired when attemping release.");
		} catch (LockUnavailable e) {
			Log.i(TAG, "Lock unavailable.");
		} catch (InvalidRequest e) {
			Log.i(TAG, "Invalid request");
		}*/
        
    }
	private void discardExisting(String newKey) {
		LockedDocument lockedDoc = mObjects.getLockedDoc();
		UnlockedDocument unlockedDoc = mObjects.getUnlockedDoc();
		if (lockedDoc != null) {
			if (lockedDoc.getKey() == null) {
				//statusUpdate("Discarding new document.");
				Toast.makeText(this, "Discarding new document.", Toast.LENGTH_LONG).show();
				
			}
			else if (!lockedDoc.getKey().equals(newKey)) {
				try {
					service.releaseLock(lockedDoc);
				} catch (LockExpired e) {
					e.printStackTrace();
				} catch (InvalidRequest e) {
					e.printStackTrace();
				}
			}
			else {
				// Newly active item is the currently locked item.
				return;
			}
			lockedDoc = null;
			//setDefaultButtons();
		} else if (unlockedDoc != null) {
			if (unlockedDoc.getKey().equals(newKey)) return;
			unlockedDoc = null;
		}
	}
	private void setView(UnlockedDocument doc) {
		text1.setText(doc.getTitle());
		text2.setText(doc.getContents());
		text1.setFocusable(false);
		text1.setEnabled(false);
		text2.setFocusable(false);
		text2.setEnabled(false);
		save.setEnabled(false);
		lock.setEnabled(true);
		refresh.setEnabled(true);
	}
	private void setView(LockedDocument doc) {
		text1.setText(doc.getTitle());
		text2.setText(doc.getContents());
		text1.setFocusableInTouchMode(true);
		text1.setEnabled(true);
		text2.setFocusableInTouchMode(true);
		text2.setEnabled(true);
		lock.setEnabled(false);
		refresh.setEnabled(false);
		save.setEnabled(true);
	}
	public void mainMenu(View view) {
    	Intent intent = new Intent().setClass(this, CollaboratorAndroidActivity.class);
    	startActivity(intent);
    }
	public void refresh(View view) {
    	UnlockedDocument unlocked = null;
		try {
			unlocked = service.getDocument(mObjects.getCurrentDocumentKey());
		} catch (InvalidRequest e) {
			e.printStackTrace();
		}
    	if (unlocked != null) {
			setView(unlocked);
		}
    }
    
    public void lock(View view) {
    	LockedDocument locked = null;
    	try {
			locked = service.lockDocument(mObjects.getCurrentDocumentKey());
			mObjects.setLockedDoc(locked);
		} catch (InvalidRequest e) {
			e.printStackTrace();
		} catch (LockUnavailable e) {
			e.printStackTrace();
			Toast.makeText(this, "Lock unavailable...Please wait", Toast.LENGTH_LONG).show();
		}
    	if (locked != null) {
			setView(locked);
		}
    }
    
    public void save(View view) {
    	LockedDocument mlocked = mObjects.getLockedDoc();

    	LockedDocument locked = new LockedDocument(mlocked.getLockedBy(), 
    			mlocked.getLockedUntil(), mlocked.getKey(), text1.getText().toString(), text2.getText().toString());
		Log.i(TAG, "saved");
    	mObjects.setLockedDoc(locked);
    	
    	UnlockedDocument unlocked = null;
    	try {
			unlocked = service.saveDocument(locked);
		} catch (InvalidRequest e) {
			e.printStackTrace();
		} catch (LockExpired e) {
			e.printStackTrace();
			Toast.makeText(this, "Lock expired", Toast.LENGTH_LONG).show();
		}
    	if (unlocked != null) {
			setView(unlocked);
			mObjects.setUnlockedDoc(unlocked);
		}
    }

}
